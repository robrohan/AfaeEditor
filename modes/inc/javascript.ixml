
<SEQ TYPE="COMMENT1">&lt;!--</SEQ>

<SPAN TYPE="COMMENT1">
	<BEGIN>/*</BEGIN>
	<END>*/</END>
</SPAN>

<SPAN TYPE="LITERAL1" NO_LINE_BREAK="TRUE" ESCAPE="\">
	<BEGIN>"</BEGIN>
	<END>"</END>
</SPAN>

<SPAN TYPE="LITERAL1" NO_LINE_BREAK="TRUE" ESCAPE="\">
	<BEGIN>'</BEGIN>
	<END>'</END>
</SPAN>

<EOL_SPAN TYPE="COMMENT1">//</EOL_SPAN>
<SEQ TYPE="NULL">)</SEQ>
<SEQ TYPE="NULL">(</SEQ>

<SEQ TYPE="OPERATOR">=</SEQ>
<SEQ TYPE="OPERATOR">!</SEQ>
<SEQ TYPE="OPERATOR">&gt;=</SEQ>
<SEQ TYPE="OPERATOR">&lt;=</SEQ>
<SEQ TYPE="OPERATOR">+</SEQ>
<SEQ TYPE="OPERATOR">-</SEQ>
<SEQ TYPE="OPERATOR">/</SEQ>
<SEQ TYPE="OPERATOR">*</SEQ>
<SEQ TYPE="OPERATOR">&gt;</SEQ>
<SEQ TYPE="OPERATOR">&lt;</SEQ>
<SEQ TYPE="OPERATOR">%</SEQ>
<SEQ TYPE="OPERATOR">&amp;</SEQ>
<SEQ TYPE="OPERATOR">|</SEQ>
<SEQ TYPE="OPERATOR">^</SEQ>
<SEQ TYPE="OPERATOR">~</SEQ>
<SEQ TYPE="OPERATOR">.</SEQ>
<!-- <SEQ TYPE="OPERATOR">}</SEQ>
<SEQ TYPE="OPERATOR">{</SEQ> -->
<SEQ TYPE="OPERATOR">,</SEQ>
<SEQ TYPE="OPERATOR">;</SEQ>
<SEQ TYPE="OPERATOR">]</SEQ>
<SEQ TYPE="OPERATOR">[</SEQ>
<SEQ TYPE="OPERATOR">?</SEQ>
<!-- <MARK_PREVIOUS TYPE="LABEL" EXCLUDE_MATCH="TRUE" AT_LINE_START="TRUE">:</MARK_PREVIOUS>
 -->
<SEQ TYPE="OPERATOR">:</SEQ>

<KEYWORDS IGNORE_CASE="FALSE">
	<!-- ECMAScript keywords -->
	<KEYWORD1>break</KEYWORD1>
	<KEYWORD1>continue</KEYWORD1>
	<KEYWORD1>delete</KEYWORD1>
	<KEYWORD1>else</KEYWORD1>
	<KEYWORD1>for</KEYWORD1>
	<KEYWORD1>function</KEYWORD1>
	<KEYWORD1>if</KEYWORD1>
	<KEYWORD1>in</KEYWORD1>
	<KEYWORD1>new</KEYWORD1>
	<KEYWORD1>return</KEYWORD1>
	<LITERAL2>this</LITERAL2>
	<LITERAL2>prototype</LITERAL2>
	<KEYWORD1>typeof</KEYWORD1>
	<KEYWORD1>var</KEYWORD1>
	<KEYWORD3>void</KEYWORD3>
	<KEYWORD1>while</KEYWORD1>
	<KEYWORD1>with</KEYWORD1>

	<!--ECMAScript keywords-->
	<!-- Reserved for future use 
		(some are already used in some Javascript Engines) 
	-->
	<KEYWORD1>abstract</KEYWORD1>
	<KEYWORD3>boolean</KEYWORD3>
	<KEYWORD3>byte</KEYWORD3>
	<KEYWORD1>case</KEYWORD1>
	<KEYWORD1>catch</KEYWORD1>
	<KEYWORD3>char</KEYWORD3>
	<KEYWORD1>class</KEYWORD1>
	<KEYWORD1>const</KEYWORD1>
	<KEYWORD1>debugger</KEYWORD1>
	<KEYWORD1>default</KEYWORD1>

	<KEYWORD1>do</KEYWORD1>
	<KEYWORD3>double</KEYWORD3>
	<KEYWORD1>enum</KEYWORD1>
	<KEYWORD2>export</KEYWORD2>
	<KEYWORD1>extends</KEYWORD1>
	<KEYWORD1>final</KEYWORD1>
	<KEYWORD1>finally</KEYWORD1>
	<KEYWORD3>float</KEYWORD3>
	<KEYWORD1>goto</KEYWORD1>
	<KEYWORD1>implements</KEYWORD1>

	<KEYWORD2>import</KEYWORD2>
	<KEYWORD1>instanceof</KEYWORD1>
	<KEYWORD3>int</KEYWORD3>
	<KEYWORD1>interface</KEYWORD1>
	<KEYWORD3>long</KEYWORD3>
	<KEYWORD1>native</KEYWORD1>
	<KEYWORD2>package</KEYWORD2>
	<KEYWORD1>private</KEYWORD1>
	<KEYWORD1>protected</KEYWORD1>
	<KEYWORD1>public</KEYWORD1>

	<KEYWORD3>short</KEYWORD3>
	<KEYWORD1>static</KEYWORD1>
	<LITERAL2>super</LITERAL2>
	<KEYWORD1>switch</KEYWORD1>
	<KEYWORD1>synchronized</KEYWORD1>
	<KEYWORD1>throw</KEYWORD1>
	<KEYWORD1>throws</KEYWORD1>
	<KEYWORD1>transient</KEYWORD1>
	<KEYWORD1>try</KEYWORD1>
	<KEYWORD1>volatile</KEYWORD1>

	<!-- Intrinsic Objects -->
	<KEYWORD3>Array</KEYWORD3>
	<KEYWORD3>Boolean</KEYWORD3>
	<KEYWORD3>Date</KEYWORD3>
	<KEYWORD3>Function</KEYWORD3>
	<KEYWORD3>Global</KEYWORD3>
	<KEYWORD3>Math</KEYWORD3>
	<KEYWORD3>Number</KEYWORD3>
	<KEYWORD3>Object</KEYWORD3>
	<KEYWORD3>RegExp</KEYWORD3><!-- Not ECMA -->
	<KEYWORD3>String</KEYWORD3>

	<!-- Literals -->
	<LITERAL2>false</LITERAL2>
	<LITERAL2>null</LITERAL2>
	<LITERAL2>true</LITERAL2>

	<LITERAL2>NaN</LITERAL2>
	<LITERAL2>Infinity</LITERAL2>

	<!-- Global functions -->
	<FUNCTION>eval</FUNCTION>
	<FUNCTION>parseInt</FUNCTION>
	<FUNCTION>parseFloat</FUNCTION>
	<FUNCTION>escape</FUNCTION>
	<FUNCTION>unescape</FUNCTION>
	<FUNCTION>isNaN</FUNCTION>
	<FUNCTION>isFinite</FUNCTION>
	<FUNCTION>isFinite</FUNCTION>
	<FUNCTION>alert</FUNCTION>
	<FUNCTION>prompt</FUNCTION>
</KEYWORDS>